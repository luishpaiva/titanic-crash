train <- read.csv("D:/Inteligência Artificial/Repositórios/titanic_crash/train.csv")
View(train)
test <- read.csv("D:/Inteligência Artificial/Repositórios/titanic_crash/test.csv")
View(test)
data.frame = read.csv(“.../path_to_/train.csv”, na.strings = “”)
View(train)
View(train)
View(train)
View(train)
data.frame = read.csv(“D:/Inteligência Artificial/Repositórios/titanic_crash/train.csv”, na.strings = “”)
data.frame = read.csv(“.../titanic_crash/train.csv”, na.strings = “”)
data.frame = read.csv(“.../train.csv”, na.strings = “”)
getwd()
setwd("D:\\Inteligência Artificial\\Repositórios\\titanic_crash")
setwd("D:\\Inteligência Artificial\\Repositórios\\titanic_crash")
getwd()
data.frame <- read.csv("train.csv", na.strings="")
data.frame <- read.csv("train.csv", na.strings="")
data.frame <- read.csv("train.csv", na.strings="")
train <- read.csv("D:/Inteligência Artificial/Repositórios/titanic_crash/train.csv")
View(train)
data.frame <- read.csv("train.csv", na.strings="")
View(data.frame)
missmap(data.frame, col=c('black', 'grey'))
library(Amelia)
missmap(data.frame, col=c('black', 'grey'))
data.frame = select(data.frame, Survived, Pclass, Age, Sex, SibSp, Parch)
library(dplyr)
data.frame = select(data.frame, Survived, Pclass, Age, Sex, SibSp, Parch)
data.frame = na.omit(data.frame)
str(data.frame)
data.frame$Survived = factor(data.frame$Survived)
data.frame$Pclass = factor(data.frame$Pclass, order=TRUE, levels = c(3, 2, 1))
library(GGally)
ggcorr(data.frame,
nbreaks = 6,
label = TRUE,
label_size = 3,
color = 'grey50')
str(data.frame)
ggcorr(data.frame,
nbreaks = 6,
label = TRUE,
label_size = 3,
color = 'grey50')
ggcorr(data.frame,
nbreaks = 6,
label = TRUE,
label_size = 3,
color = 'grey50')
data.frame <- read.csv("train.csv", na.strings="")
data.frame = select(data.frame, Survived, Pclass, Age, Sex, SibSp, Parch)
data.frame = na.omit(data.frame)
str(data.frame)
ggcorr(data.frame,
nbreaks = 6,
label = TRUE,
label_size = 3,
color = 'grey50')
data.frame$Survived = factor(data.frame$Survived)
data.frame$Pclass = factor(data.frame$Pclass, order=TRUE, levels = c(3, 2, 1))
library(ggplot2)
ggplot(data.frame, aes(x = Survived)) +
geom_bar(width=0.5, fill = 'coral') +
geom_text(stat='count', aes(label=stat(count)), vjust=-0.5) +
theme_classic()
ggplot(data.frame, aes(x = Survived, fill=Sex)) +
geom_bar(position = position_dodge()) +
geom_text(stat=’count’,
ggplot(data.frame, aes(x = Survived, fill=Sex)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count',
aes(label=stat(count)),
position = position_dodge(width=1), vjust=-0.5)+
theme_classic()
ggplot(data.frame, aes(x = Survived, fill=Pclass)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count',
aes(label=stat(count)),
position = position_dodge(width=1),
vjust=-0.5)+
theme_classic()
ggplot(data.frame, aes(x = Age)) +
geom_density(fill='coral'')
ggplot(data.frame, aes(x = Age)) +
geom_density(fill='coral'')
ggplot(data.frame, aes(x = Age)) +
geom_density(fill='coral')
data.frame$Discretized.age = cut(data.frame$Age, c(0,10,20,30,40,50,60,70,80,100))
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count', aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5)+
theme_classic()data.frame$Discretized.age = NULL
data.frame$Discretized.age = cut(data.frame$Age, c(0,10,20,30,40,50,60,70,80,100))
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count', aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5)+
theme_classic()data.frame$Discretized.age = NULL
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat=count, aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5)+
theme_classic()data.frame$Discretized.age = NULL
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat=count, aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5)+
theme_classic()data.frame$Discretized.age = NULL
data.frame$Discretized.age = cut(data.frame$Age, c(0,10,20,30,40,50,60,70,80,100))
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count', aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5) +
theme_classic()data.frame$Discretized.age = NULL
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count', aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5) +
theme_classic()data.frame$Discretized.age
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count', aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5) +
theme_classic()data.frame
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count', aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5) +
theme_classic()data.frame
ggplot(data.frame, aes(x = Discretized.age, fill=Survived)) +
geom_bar(position = position_dodge()) +
geom_text(stat='count', aes(label=stat(count)), position = position_dodge(width=1), vjust=-0.5)
train_test_split = function(data, fraction = 0.8, train = TRUE) {
total_rows = nrow(data)
train_rows = fraction * total_rows
sample = 1:train_rows
if (train == TRUE) {
return (data[sample, ])
} else {
return (data[-sample, ])
}
}
train <- train_test_split(data.frame, 0.8, train = TRUE)
test <- train_test_split(data.frame, 0.8, train = FALSE)
library(rpart)
library(rpart.plot)
fit <- rpart(Survived~., data = train, method = ‘class’)
library(rpart)
library(rpart.plot)
fit <- rpart(Survived~., data = train, method = 'class')
rpart.plot(fit, extra = 106)
predicted = predict(fit, test, type = type)
predicted = predict(fit, test, type = type)
predicted = predict(fit, test, type = 'type')
predicted = predict(fit, test)
table = table(test$Survived, predicted)
predicted = predict(fit, test)
predicted = predict(fit, test, type = type)
predicted = predict(fit, test, type)
predicted = predict(fit, test, type = prob)
predicted = predict(fit, test, type = type)
predicted = predict(fit, test, type = 'class')
table = table(test$Survived, predicted)
dt_accuracy = sum(diag(table_mat)) / sum(table_mat)
dt_accuracy = sum(diag(table)) / sum(table)
paste("The accuracy is : ", dt_accuracy)
control = rpart.control(minsplit = 8,
minbucket = 2,
maxdepth = 6,
cp = 0)
tuned_fit = rpart(Survived~., data = data_train, method = ‘class’, control = control)
control = rpart.control(minsplit = 8,
minbucket = 2,
maxdepth = 6,
cp = 0)
tuned_fit = rpart(Survived~., data = data_train, method = 'class', control = control)
control = rpart.control(minsplit = 8,
minbucket = 2,
maxdepth = 6,
cp = 0)
tuned_fit = rpart(Survived~., data = train, method = 'class', control = control)
dt_predict = predict(tuned_fit, test, type = 'class')
table_mat = table(test$Survived, dt_predict)
dt_accuracy_2 = sum(diag(table_mat)) / sum(table_mat)
paste(“The accuracy is : “, dt_accuracy_2)
control = rpart.control(minsplit = 8,
minbucket = 2,
maxdepth = 6,
cp = 0)
tuned_fit = rpart(Survived~., data = train, method = 'class', control = control)
dt_predict = predict(tuned_fit, test, type = 'class')
table_mat = table(test$Survived, dt_predict)
dt_accuracy_2 = sum(diag(table_mat)) / sum(table_mat)
paste("The accuracy is : ", dt_accuracy_2)
data_rescale = mutate_if(data.frame,
is.numeric,
list(~as.numeric(scale(.))))
r_train = train_test_split(data_rescale, 0.7, train = TRUE)
r_test = train_test_split(data_rescale, 0.7, train = FALSE)
logit = glm(Survived~., data = r_train, family = ‘binomial’)
data_rescale = mutate_if(data.frame,
is.numeric,
list(~as.numeric(scale(.))))
r_train = train_test_split(data_rescale, 0.7, train = TRUE)
r_test = train_test_split(data_rescale, 0.7, train = FALSE)
logit = glm(Survived~., data = r_train, family = 'binomial')
summary(logit)
lr_predict = predict(logit, r_test, type = 'response')
table_mat = table(r_test$Survived, lr_predict > 0.68)
lr_accuracy = sum(diag(table_mat)) / sum(table_mat)
paste("The accuracy is : ", lr_accuracy)
library(e1071)
install.packages('e1071')
library(e1071)
nb_model = naiveBayes(Survived ~., data=train)
nb_predict = predict(nb_model,test)
table_mat = table(nb_predict, test$Survived)
nb_accuracy = sum(diag(table_mat)) / sum(table_mat)
paste("The accuracy is : ", nb_accuracy)
library(class)
library(dummies)
install.packages('dummies')
library(dummies)
ohdata = cbind(data.frame, dummy(data.frame$Pclass))
